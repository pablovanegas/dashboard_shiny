labs(x="Mes", y="Ventas Semanales", title="Ventas Semanales por Mes") +
theme_minimal()
holidays_per_month <- sales %>%
filter(IsHoliday == TRUE) %>%
mutate(Month = format(as.Date(Date),"%Y-%m")) %>%
group_by(Month) %>%
summarise(Avg_Holidays_Sales = mean(Weekly_Sales))
head(holidays_per_month)
ggplot(data = holidays_per_month, aes(x = Month, y = Avg_Holidays_Sales)) +
geom_bar(stat = "identity") +
labs(title = "Average Holiday Sales Per Month",
subtitle = "(Based on Days Marked As Holidays)",
x = "Month",
y = "Average Weekly Sales During Holidays") +
theme_bw()
source('logic.R')
sales <- read_excel("Datawarehouse.xlsx",
sheet = "sales")
library(readr)
library(dplyr)
library(ggplot2)
stores <- read_excel("Datawarehouse.xlsx",
sheet = "stores")
??read_excel
??read_excel
help(read_excel)
library(readr)
library(dplyr)
library(ggplot2)
library(readxl)
############################### CARGA DE DATOS ##################################################
supermarket <- read_csv("supermarket_Sales.csv") #ON SALES DASHBOARD
############################### CARGA DE DATOS ##################################################
supermarket <- read_csv("supermarket_Sales.csv") #ON SALES DASHBOARD
# Convertir la columna "Date" a formato de fecha
sales$Date <- as.Date(sales$Date)
# Ordenar el dataframe por la columna "Date" y establecerla como índice
sales <- sales[order(sales$Date), ]
# Calcular la columna "Revenue"
sales$Revenue <- sales$`Unit price` * sales$Quantity
############################### CARGA DE DATOS ##################################################
supermarket <- read_csv("supermarket_Sales.csv") #ON SALES DASHBOARD
# Convertir la columna "Date" a formato de fecha
supermarket$Date <- as.Date(supermarket$Date)
# Ordenar el dataframe por la columna "Date" y establecerla como índice
supermarket <- supermarket[order(supermarket$Date), ]
# Calcular la columna "Revenue"
supermarket$Revenue <- supermarket$`Unit price` * supermarket$Quantity
# Renombrar la columna "Gross income"
colnames(supermarket)[colnames(supermarket) == "Gross income"] <- "Income after costs and taxes"
stores <- read_excel("Datawarehouse.xlsx",
sheet = "stores")
sales <- read_excel("Datawarehouse.xlsx",
sheet = "sales")
features <- read_excel("Datawarehouse.xlsx",
sheet = "features")
source('logic.R')
View(mean_unemployment_by_type)
kpi1 <- ggplot(mean_size_by_type, aes(x = Type, y = mean_size)) +
geom_col(fill = "skyblue") +
labs(title = "Mean Size of Stores by Type",
y = "Mean Size",
x = "Store Type") +
theme_minimal()
plot(kpi1)
shiny::runApp()
ui <- bootstrapPage(useShinyjs(),
dashboardPage(
dashboardHeader(title = "Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Stores", tabName = "dashboard", icon = icon("dashboard"),
menuSubItem('A'),
menuSubItem('B'),
menuSubItem('C')),
menuItem("Sales", tabName = "widgets", icon = icon("th")),
menuItem('Features', tabName = 'features', icon = icon('th'))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
h2("Dashboard tab content")
),
tabItem(tabName = "features",
h2("TEXT"),
fluidRow(
box(
title = "Mean Temperature of Stores by Type",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
plotOutput("mean_temp_by_type")
),
box(
title = "Mean Fuel Price of Stores by Type",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
plotOutput("mean_fuel_price_by_type")
),
box(
title = "Mean Unemployment Rate of Stores by Type",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
plotOutput("mean_unemployment_by_type")
),
box(
title = "Mean CPI of Stores by Type",
status = "primary",
solidHeader = TRUE,
collapsible = TRUE,
plotOutput("mean_cpi_by_type")
)
),
box(
title = 'Mean size of Stores by Type',
status = 'primary',
solidHeader = TRUE,
collapsible = TRUE,
plotOutput(kpi1)
)
)
)
)
)
)
runApp()
runApp()
runApp()
# Extract and format the month from the date
sales_stores$Month <- format(sales_stores$Date, "%m")
library(readr)
library(dplyr)
library(ggplot2)
library(readxl)
############################### CARGA DE DATOS ##################################################
supermarket <- read_csv("supermarket_Sales.csv") #ON SALES DASHBOARD
# Convertir la columna "Date" a formato de fecha
supermarket$Date <- as.Date(supermarket$Date)
# Ordenar el dataframe por la columna "Date" y establecerla como índice
supermarket <- supermarket[order(supermarket$Date), ]
# Calcular la columna "Revenue"
supermarket$Revenue <- supermarket$`Unit price` * supermarket$Quantity
# Renombrar la columna "Gross income"
colnames(supermarket)[colnames(supermarket) == "Gross income"] <- "Income after costs and taxes"
################################################################################################
stores <- read_excel("Datawarehouse.xlsx",
sheet = "stores")
sales <- read_excel("Datawarehouse.xlsx",
sheet = "sales")
features <- read_excel("Datawarehouse.xlsx",
sheet = "features")
sales_stores <- merge(sales, stores, by = "Store")
features$Fuel_Price <- as.numeric(features$Fuel_Price)
features_stores <- merge(features, stores, by = "Store")
stores$Size <- as.numeric(stores$Size)
stores$Type <- as.factor(stores$Type)
sales$Date <- as.Date(sales$Date)
################################ KPIS PARA FEATURES##############################################
# Calculate mean size by type
mean_size_by_type <- stores %>%
group_by(Type) %>%
summarise(mean_size = mean(Size))
kpi1 <- ggplot(mean_size_by_type, aes(x = Type, y = mean_size)) +
geom_col(fill = "skyblue") +
labs(title = "Mean Size of Stores by Type",
y = "Mean Size",
x = "Store Type") +
theme_minimal()
plot(kpi1)
# Calculate mean temperature by type
features_stores$Temperature <- as.numeric(features_stores$Temperature)
mean_temperature_by_type <- features_stores %>%
group_by(Type) %>%
summarise(mean_temperature = mean(Temperature))
kpi2 <- ggplot(mean_temperature_by_type, aes(x = Type, y = mean_temperature)) +
geom_col(fill = "skyblue") +
labs(title = "Mean Temperature of Stores by Type",
y = "Mean Temperature",
x = "Store Type") +
theme_minimal()
# Calculate mean fuel price by type
mean_fuel_price_by_type <- features_stores %>%
group_by(Type) %>%
summarise(mean_fuel_price = mean(Fuel_Price))
kpi3 <- ggplot(mean_fuel_price_by_type, aes(x = Type, y = mean_fuel_price)) +
geom_col(fill = "skyblue") +
labs(title = "Mean Fuel Price of Stores by Type",
y = "Mean Fuel Price",
x = "Store Type") +
theme_minimal()
# Unemployment rate by type
features_stores$Unemployment <- as.numeric(features_stores$Unemployment)
mean_unemployment_by_type <- features_stores %>%
group_by(Type) %>%
summarise(mean_unemployment = mean(Unemployment))
kpi4 <- ggplot(mean_unemployment_by_type, aes(x = Type, y = mean_unemployment)) +
geom_col(fill = "skyblue") +
labs(title = "Mean Unemployment Rate of Stores by Type",
y = "Mean Unemployment Rate",
x = "Store Type") +
theme_minimal()
# CPI by type
features_stores$CPI <- as.numeric(features_stores$CPI)
mean_cpi_by_type <- features_stores %>%
group_by(Type) %>%
summarise(mean_cpi = mean(CPI))
kpi5 <- ggplot(mean_cpi_by_type, aes(x = Type, y = mean_cpi)) +
geom_col(fill = "skyblue") +
labs(title = "Mean CPI of Stores by Type",
y = "Mean CPI",
x = "Store Type") +
theme_minimal()
################################################################################
################################# KPIS PARA SALES ############################################
#Sales by the time
head(sales_stores)
summary(sales_stores)
# Primero, asegúrate de que la columna 'Date' sea de tipo Date
sales$Date <- as.Date(sales_stores$Date, format = "%d/%m/%Y")
sales$Weekly_Sales <- as.numeric(sales_stores$Weekly_Sales)
# Luego, carga la librería ggplot2
library(ggplot2)
# Ahora, crea el gráfico de líneas
ggplot(sales, aes(x = Date, y = Weekly_Sales)) +
geom_line() +
labs(x = "Fecha", y = "Ventas Semanales", title = "Ventas Semanales a lo Largo del Tiempo") +
theme_minimal()
# Extract and format the month from the date
sales_stores$Month <- format(sales_stores$Date, "%m")
# Extract and format the month from the date
sales_stores$Month <- format(sales_stores$Date, "%m")
sales_stores$Month <- as.factor(sales_stores$Month)
# Group sales by month
sales_by_month <- aggregate(Weekly_Sales ~ Month, data=sales_stores, FUN=sum)
# Create line plot
ggplot(data=sales_by_month, aes(x=Month, y=Weekly_Sales)) +
geom_line(aes(group=1)) +
labs(x="Mes", y="Ventas Semanales", title="Ventas Semanales por Mes") +
theme_minimal()
# Ahora, crea el gráfico de líneas
ggplot(sales, aes(x = Date, y = Weekly_Sales)) +
geom_line() +
labs(x = "Fecha", y = "Ventas Semanales", title = "Ventas Semanales a lo Largo del Tiempo") +
theme_minimal()
# Primero, asegúrate de que la columna 'Date' sea de tipo Date
sales$Date <- as.Date(sales_stores$Date, format = "%d/%m/%Y")
sales_by_month <- sales %>% group_by(Month, Year) %>% summarise(Total_Sales = sum(Weekly_Sales))
sales_by_month <- sales %>% group_by(Month = format(Date, "%m"), year = format(Date, 'Y')) %>%
summarise(Total_Sales = sum(Weekly_Sales))
# Create line plot
ggplot(data=sales_by_month, aes(x=Month, y=Weekly_Sales)) +
geom_line(aes(group=1)) +
labs(x="Mes", y="Ventas Semanales", title="Ventas Semanales por Mes") +
theme_minimal()
head(sales_by_month)
View(sales_by_month)
sales_by_month <- sales %>% group_by(Month = format(Date, "%m"), year = format(Date, '%Y')) %>%
summarise(Total_Sales = sum(Weekly_Sales))
head(sales_by_month)
# Create line plot
ggplot(data=sales_by_month, aes(x=Month, y=Weekly_Sales)) +
geom_line(aes(group=1)) +
labs(x="Mes", y="Ventas Semanales", title="Ventas Semanales por Mes") +
theme_minimal()
View(sales_by_month)
# Create line plot
ggplot(data=sales_by_month, aes(x=Month, y=Total_Sales)) +
geom_line(aes(group=1)) +
labs(x="Mes", y="Ventas Semanales", title="Ventas Semanales por Mes") +
theme_minimal()
sales$Date <- as.Date(sales_stores$Date, format = "%d/%m/%Y")
sales_by_month <- sales %>% group_by(Month = format(Date, "%m"), year = format(Date, '%Y')) %>%
summarise(Total_Sales = sum(Weekly_Sales))
# Create line plot
ggplot(data=sales_by_month, aes(x=Month, y=Total_Sales)) +
geom_line(aes(group=1)) +
labs(x="Mes", y="Ventas Semanales", title="Ventas Semanales por Mes") +
theme_minimal()
# Group sales data by month and year, and calculate total sales
sales_by_month <- sales %>%
mutate(Month = month(Date), Year = year(Date)) %>%
group_by(Month, Year) %>%
summarise(Total_Sales = sum(Weekly_Sales), .groups = "drop")
#
# Convert store_sales$Date to proper date format
store_sales$Date <- as.Date(store_sales$Date, format = "%d/%m/%Y")
#
# Convert store_sales$Date to proper date format
sales$Date <- as.Date(sales$Date, format = "%d/%m/%Y")
# Group by month and year and calculate total sales per month
sales_by_month <- sales %>%
mutate(month_year = paste0(format(Date, "%b-%y"))) %>% # Combine month and year into one string
group_by(month_year) %>%
summarize(total_sales = sum(Weekly_Sales))
# Set up chart elements
chart_title <- "Weekly Sales by Month"
x_label <- "Month"
y_label <- "Total Weekly Sales"
# Plot weekly sales by month
ggplot(data = sales_by_month, aes(x = factor(month_year), y = total_sales)) +
geom_line(aes(group = 1)) +
scale_x_discrete(breaks = unique(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))),
limits = rev(levels(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))))) +
labs(title = chart_title, x = x_label, y = y_label) +
theme_bw() +
theme(panel.grid.major = element_line(), panel.grid.minor = element_blank())
library(forecast))
library(forecast)
#
# Load required packages
library(tidyverse)
# Convert sales$Date to proper date format
sales$Date <- as.Date(sales$Date, format = "%d/%m/%Y")
# Convert store_sales$Date to proper date format
sales$Date <- as.Date(sales$Date, format = "%d/%m/%Y")
# Group by month and year and calculate total sales per month
sales_by_month <- sales %>%
mutate(month_year = paste0(format(Date, "%b-%y"))) %>% # Combine month and year into one string
group_by(month_year) %>%
summarize(total_sales = sum(Weekly_Sales))
# Set up chart elements
chart_title <- "Weekly Sales by Month"
x_label <- "Month"
y_label <- "Total Weekly Sales"
# Plot weekly sales by month
ggplot(data = sales_by_month, aes(x = factor(month_year), y = total_sales)) +
geom_line(aes(group = 1)) +
scale_x_discrete(breaks = unique(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))),
limits = rev(levels(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))))) +
labs(title = chart_title, x = x_label, y = y_label) +
theme_bw() +
theme(panel.grid.major = element_line(), panel.grid.minor = element_blank())
# Ahora, crea el gráfico de líneas
ggplot(sales, aes(x = Date, y = Weekly_Sales)) +
geom_line() +
labs(x = "Fecha", y = "Ventas Semanales", title = "Ventas Semanales a lo Largo del Tiempo") +
theme_minimal()
head(sales_stores)
summary(sales_stores)
head(sales_stores)
# Ahora, crea el gráfico de líneas
ggplot(sales, aes(x = Date, y = Weekly_Sales)) +
geom_line() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(x = "Date", y = "Weekly Sales", title = "Weekly Sales Over Time") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
theme(panel.grid.major = element_line(color = "#eceff1"), panel.grid.minor = element_blank()) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
runApp()
runApp()
ggplot(sales, aes(x = Date, y = Weekly_Sales)) +
geom_line() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(x = "Date", y = "Weekly Sales", title = "Weekly Sales Over Time") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
theme(panel.grid.major = element_line(color = "#eceff1"), panel.grid.minor = element_blank()) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
View(sales_stores)
sales_stores$Date <- as.Date(sales_stores$Date, format = "%d/%m/%Y")
sales_stores$Weekly_Sales <- as.numeric(sales_stores$Weekly_Sales)
# Ahora, crea el gráfico de líneas
kpi6 <- ggplot(sales_stores, aes(x = Date, y = Weekly_Sales)) +
geom_line() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(x = "Date", y = "Weekly Sales", title = "Weekly Sales Over Time") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
theme(panel.grid.major = element_line(color = "#eceff1"), panel.grid.minor = element_blank()) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
#
# Convert store_sales$Date to proper date format
sales_stores$Date <- as.Date(sales_stores$Date, format = "%d/%m/%Y")
# Group by month and year and calculate total sales_stores per month
sales_by_month <- sales_stores %>%
mutate(month_year = paste0(format(Date, "%b-%y"))) %>% # Combine month and year into one string
group_by(month_year) %>%
summarize(total_sales = sum(Weekly_Sales))
# Set up chart elements
chart_title <- "Weekly Sales by Month"
x_label <- "Month"
y_label <- "Total Weekly Sales"
# Plot weekly sales_stores by month
kpi7 <- ggplot(data = sales_by_month, aes(x = factor(month_year), y = total_sales)) +
geom_line(aes(group = 1)) +
scale_x_discrete(breaks = unique(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))),
limits = rev(levels(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))))) +
labs(title = chart_title, x = x_label, y = y_label) +
theme_bw() +
theme(panel.grid.major = element_line(), panel.grid.minor = element_blank())
# Ahora, crea el gráfico de líneas
kpi6 <- ggplot(sales_stores, aes(x = Date, y = Weekly_Sales)) +
geom_line() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(x = "Date", y = "Weekly Sales", title = "Weekly Sales Over Time") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
theme(panel.grid.major = element_line(color = "#eceff1"), panel.grid.minor = element_blank()) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
#
# Convert store_sales$Date to proper date format
sales_stores$Date <- as.Date(sales_stores$Date, format = "%d/%m/%Y")
# Group by month and year and calculate total sales_stores per month
sales_by_month <- sales_stores %>%
mutate(month_year = paste0(format(Date, "%b-%y"))) %>% # Combine month and year into one string
group_by(month_year) %>%
summarize(total_sales = sum(Weekly_Sales))
# Set up chart elements
chart_title <- "Weekly Sales by Month"
x_label <- "Month"
y_label <- "Total Weekly Sales"
# Plot weekly sales_stores by month
kpi7 <- ggplot(data = sales_by_month, aes(x = factor(month_year), y = total_sales)) +
geom_line(aes(group = 1)) +
scale_x_discrete(breaks = unique(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))),
limits = rev(levels(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))))) +
labs(title = chart_title, x = x_label, y = y_label) +
theme_bw() +
theme(panel.grid.major = element_line(), panel.grid.minor = element_blank())
ggplot(data = sales_by_month, aes(x = factor(month_year), y = total_sales)) +
geom_line(aes(group = 1)) +
scale_x_discrete(breaks = unique(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))),
limits = rev(levels(fct_reorder(factor(sales_by_month$month_year), match(sales_by_month$month_year, rev(unique(sales_by_month$month_year))))))) +
labs(title = chart_title, x = x_label, y = y_label) +
theme_bw() +
theme(panel.grid.major = element_line(), panel.grid.minor = element_blank())
#
ggplot(sales_stores, aes(x = Date, y = Weekly_Sales)) +
geom_line() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(x = "Date", y = "Weekly Sales", title = "Weekly Sales Over Time") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
theme(panel.grid.major = element_line(color = "#eceff1"), panel.grid.minor = element_blank()) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
################################# KPIS PARA SALES ############################################
head(sales_stores)
###############################################################################################
# Filter out rows where IsHoliday == TRUE
sales_filtered <- filter(sales, !IsHoliday)
# Pivot wider to convert the data frame from long to wide format
sales_wide <- pivot_wider(sales_filtered, id_cols = c("Date", "Location", "Size"), names_from = "Type", values_from = "Weekly_Sales")
###############################################################################################
# Filter out rows where IsHoliday == TRUE
sales_filtered <- filter(sales, !IsHoliday)
###############################################################################################
# Filter out rows where IsHoliday == TRUE
sales_filtered <- filter(sales_stores, !IsHoliday)
head(sales_stores)
###############################################################################################
# Filter out rows where IsHoliday == TRUE
class(sales_stores$IsHoliday)
###############################################################################################
# Filter out rows where IsHoliday == TRUE
sales_stores$IsHoliday <- as.logical(sales_stores$IsHoliday)
sales_filtered <- filter(sales_stores, !IsHoliday)
# Pivot wider to convert the data frame from long to wide format
sales_wide <- pivot_wider(sales_filtered, id_cols = c("Date", "Location", "Size"), names_from = "Type", values_from = "Weekly_Sales")
# Melt the data frame back to long format
sales_long <- reshape2::melt(sales_wide, id.vars = c("Date", "Location", "Size"), measure.vars = colnames(sales_wide)[-(1:3)])
# Create the line plot with facets
ggplot(sales_long, aes(x = Date, y = value, color = variable)) +
geom_line() +
labs(x = "Date", y = "Weekly Sales", title = "Weekly Sales Over Time by Type of Store") +
facet_wrap(~ Location) +
theme_minimal()
# Calculate the mean weekly sales by holiday status and type of store
sales_holiday <- aggregate(Weekly_Sales ~ IsHoliday + Type, data = sales, FUN = mean)
# Create the bar chart
ggplot(sales_holiday, aes(x = factor(IsHoliday), y = Weekly_Sales, fill = Type)) +
geom_bar(stat = "identity") +
labs(x = "Holiday Status", y = "Mean Weekly Sales", title = "Average Weekly Sales on Holidays vs Non-Holidays by Type of Store") +
theme_minimal() +
theme(legend.position = "top")
###############################################################################################
# Filter out rows where IsHoliday == TRUE
sales_stores$IsHoliday <- as.logical(sales_stores$IsHoliday)
sales_filtered <- filter(sales_stores, !IsHoliday)
# Pivot wider to convert the data frame from long to wide format
sales_wide <- pivot_wider(sales_filtered, id_cols = c("Date", "Location", "Size"), names_from = "Type", values_from = "Weekly_Sales")
# Pivot wider to convert the data frame from long to wide format
sales_wide <- pivot_wider(sales_filtered,
id_cols = c("Date", "Location", "Size"),
names_from = "Type",
values_from = "Weekly_Sales",
values_fn = list(Weekly_Sales = mean, na.rm = TRUE))
# Pivot wider to convert the data frame from long to wide format
sales_wide <- pivot_wider(sales_filtered,
id_cols = c("Date", "Location", "Size"),
names_from = "Type",
values_from = "Weekly_Sales",
values_fn = list(Weekly_Sales = mean))
# Melt the data frame back to long format
sales_long <- reshape2::melt(sales_wide, id.vars = c("Date", "Location", "Size"), measure.vars = colnames(sales_wide)[-(1:3)])
# Create the line plot with facets
ggplot(sales_long, aes(x = Date, y = value, color = variable)) +
geom_line() +
labs(x = "Date", y = "Weekly Sales", title = "Weekly Sales Over Time by Type of Store") +
facet_wrap(~ Location) +
theme_minimal()
# Calculate the mean weekly sales by holiday status and type of store
sales_holiday <- aggregate(Weekly_Sales ~ IsHoliday + Type, data = sales, FUN = mean)
# Create the bar chart
ggplot(sales_holiday, aes(x = factor(IsHoliday), y = Weekly_Sales, fill = Type)) +
geom_bar(stat = "identity") +
labs(x = "Holiday Status", y = "Mean Weekly Sales", title = "Average Weekly Sales on Holidays vs Non-Holidays by Type of Store") +
theme_minimal() +
theme(legend.position = "top")
